generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  PARTICIPANT
}

model User {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now()) @db.Timestamptz(6)
  lastUpdated DateTime? @db.Timestamptz(6)
  password    String
  email       String    @unique
  role        Role
  fullName    String

  companyId Int?
  company   Company? @relation("CompanyUsers", fields: [companyId], references: [id], onDelete: Cascade)

  adminOfCompany Company?       @relation("CompanyAdmin")
  notifications  Notification[] @relation("UserNotification")
  tasks          Task[]         @relation("UserTasks")
  comments       TaskComment[]  @relation("CommentAuthor")

  @@index([id])
  @@map("user")
}

model Company {
  id         Int      @id @default(autoincrement())
  name       String
  size       Int
  identifier String   @unique()
  createdAt  DateTime @default(now()) @db.Timestamptz(6)

  adminId Int  @unique
  admin   User @relation("CompanyAdmin", fields: [adminId], references: [id], onDelete: Cascade)

  users User[] @relation("CompanyUsers")

  tasks Task[] @relation("CompanyTasks")

  @@index([id])
  @@index([identifier])
  @@map("company")
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
  BLOCKED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

model Task {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime     @default(now()) @db.Timestamptz(6)
  lastUpdated   DateTime?    @db.Timestamptz(6)
  title         String
  description   String
  status        TaskStatus
  priority      TaskPriority
  deadline      DateTime
  estimatedTime Int
  spentTime     Int?

  assignedToId Int?
  assignedTo   User? @relation("UserTasks", fields: [assignedToId], references: [id], onDelete: Cascade)

  companyId Int
  company   Company @relation("CompanyTasks", fields: [companyId], references: [id], onDelete: Cascade)

  comments TaskComment[] @relation("TaskComments")

  @@index([id])
  @@index([status])
  @@index([priority])
  @@index([deadline])
  @@map("task")
}

model TaskComment {
  id        Int      @id @default(autoincrement())
  text      String
  createdAt DateTime @default(now()) @db.Timestamptz(6)

  taskId Int
  task   Task @relation("TaskComments", fields: [taskId], references: [id], onDelete: Cascade)

  authorId Int
  author   User @relation("CommentAuthor", fields: [authorId], references: [id], onDelete: Cascade)

  @@map("taskComment")
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_UPDATED
  MISSED_DEADLINE
  TASK_COMMENTED
}

enum NotificationStatus {
  VIEWED
  UNVIEWED
}

model Notification {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now()) @db.Timestamptz(6)
  lastUpdated DateTime? @db.Timestamptz(6)

  data               Json
  notificationType   NotificationType
  notificationStatus NotificationStatus

  userId Int
  user   User @relation("UserNotification", fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification")
}
